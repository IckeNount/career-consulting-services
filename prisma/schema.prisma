// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ApplicationStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum LanguageProficiency {
  BASIC
  INTERMEDIATE
  ADVANCED
  NATIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  PHD
  DOCTORATE
  OTHER
}

enum BlogCategory {
  TEACHING
  VISAS
  RELOCATION
  CAREER_TIPS
  INTERVIEWS
  CULTURE
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum JobType {
  FULL_TIME
  CONTRACT
  SUBSTITUTE
}

// Main Application Model
model Application {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    ApplicationStatus @default(PENDING)

  // Personal Information
  fullName         String
  email            String
  phone            String
  nationality      String
  residence        String        // Current country of residence
  religion         String
  maritalStatus    String

  // Passport Information
  hasPassport      Boolean       @default(false)
  passportNumber   String?

  // Job Preferences
  startDate        DateTime

  // Education & Documents
  educationLevel   String        // Changed to String for flexibility
  torFile          String?       // Transcript of Records file path/URL
  diplomaFile      String?       // Degree/Diploma certificate file path/URL
  resumeFile       String?       // CV/Resume file path/URL

  // Experience & Skills
  hasExperience    Boolean       @default(false)
  experience       String?       @db.Text
  languages        String        // Comma-separated languages
  englishLevel     String
  skills           String?       @db.Text

  // Additional Details
  motivation       String        @db.Text
  referralSource   String
  consent          Boolean       @default(false)

  // Relations
  statusHistory  StatusHistory[]

  // Admin fields
  reviewedBy   String?
  reviewNotes  String?   @db.Text
  reviewer     AdminUser? @relation(fields: [reviewedBy], references: [id], onDelete: SetNull)

  // Job Vacancy relation
  jobId        String?
  job          JobVacancy? @relation(fields: [jobId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([residence])
  @@index([jobId])
  @@map("applications")
}

// Note: Language model removed as languages are now stored as comma-separated string in Application model

// Status change history
model StatusHistory {
  id            String            @id @default(cuid())
  status        ApplicationStatus
  changedAt     DateTime          @default(now())
  changedBy     String?
  notes         String?           @db.Text
  applicationId String
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  admin         AdminUser?        @relation(fields: [changedBy], references: [id], onDelete: SetNull)

  @@index([applicationId])
  @@map("status_history")
}

// Admin Users Model
model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  role         AdminRole @default(ADMIN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?
  isActive     Boolean   @default(true)

  // Relations
  reviewedApplications Application[]
  statusChanges        StatusHistory[]
  auditLogs            AuditLog[]
  blogPosts            BlogPost[]

  @@index([email])
  @@map("admin_users")
}

// Audit Log Model
model AuditLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  userId     String
  action     String
  entityType String
  entityId   String
  changes    Json?
  ipAddress  String?
  userAgent  String?

  // Relations
  user AdminUser @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([entityType, entityId])
  @@map("audit_logs")
}

// Blog Post Model
model BlogPost {
  id          String      @id @default(cuid())
  slug        String      @unique
  title       String
  excerpt     String      @db.Text
  content     String      @db.Text
  coverImage  String
  category    BlogCategory
  status      BlogStatus  @default(DRAFT)
  
  // Metadata
  author      String      @default("KTECCS Team")
  readTime    String      @default("5 min read")
  views       Int         @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  authorId    String?
  authorAdmin AdminUser?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  media       BlogMedia[]

  // Indexes
  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
  @@index([createdAt])
  @@map("blog_posts")
}

// Blog Media Model (for photos and videos)
enum MediaType {
  IMAGE
  VIDEO
}

model BlogMedia {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  caption   String?
  order     Int       @default(0)
  postId    String
  post      BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@index([postId])
  @@map("blog_media")
}

// Job Vacancy Model
model JobVacancy {
  id                  String      @id @default(cuid())
  title               String
  description         String      @db.Text
  companyName         String
  location            String
  salaryRange         String?
  requirements        String      @db.Text
  jobType             JobType
  applicationDeadline DateTime?
  isActive            Boolean     @default(true)
  
  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Relations
  applications        Application[]

  // Indexes
  @@index([isActive])
  @@index([jobType])
  @@index([createdAt])
  @@map("job_vacancies")
}

// Testimonial Model
enum TestimonialStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TestimonialMediaType {
  PHOTO
  VIDEO
}

model Testimonial {
  id           String                @id @default(cuid())
  name         String
  title        String                // Job title or role
  comment      String                @db.Text
  rating       Float                 @default(5.0)
  
  // Media
  mediaUrl     String?
  mediaType    TestimonialMediaType?
  thumbnailUrl String?               // For videos or optimized photo
  
  // Status
  status       TestimonialStatus     @default(DRAFT)
  order        Int                   @default(0) // For custom ordering
  
  // Timestamps
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  publishedAt  DateTime?

  // Indexes
  @@index([status])
  @@index([order])
  @@index([createdAt])
  @@map("testimonials")
}
